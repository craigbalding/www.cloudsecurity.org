--- 
title:      Google Native Client, Google Chrome OS & Coming Out of Beta
created_at: 2009-07-08 13:30:59 Z
author:     Craig Balding
blog_post:  true
tags:
- Software as a Service

--- 
<p><strong><img class='left' title='Google' src='/files/Google-20090708-145917.jpg' height='119' alt='Google-20090708-145917 Google Native Client, Google Chrome OS &amp; Coming Out of Beta' width='301'/>Google just made three big announcements </strong>that reveals more about their cloud strategy, security &amp; positioning with enterprises.</p>
<h2>Google Chrome Operating System</h2>
<p><strong>Perhaps the biggest news is their plan to create a new operating system</strong>, based on the Linux kernel, running on X86 and ARM chipsets and targeted at the Netbook/Laptop/Desktop user:</p>
<blockquote><p>“<strong>Google Chrome OS is an open source, lightweight operating system</strong> that will initially be targeted at netbooks. Later this year we will open-source its code, and netbooks running Google Chrome OS will be available for consumers in the second half of 2010.”</p></blockquote>
<p>Talking of their goals:</p>
<blockquote><p>“<strong>Speed, simplicity and security are the key aspects of Google Chrome OS</strong>. We’re designing the OS to be fast and lightweight, to start up and get you onto the web in a few seconds. The user interface is minimal to stay out of your way, and most of the user experience takes place on th web.”</p></blockquote>
<p>And starting from a clean slate (and an obligatory swipe at Microsoft):</p>
<blockquote><p>“And as we did for the Google Chrome browser, <strong>we are going back to the basics and completely redesigning the underlying security architecture of the OS so that users don’t have to deal with viruses, malware and security updates. It should just work.</strong></p></blockquote>
<blockquote><p>&lt;snip&gt;</p></blockquote>
<blockquote><p>The software architecture is simple — <strong>Google Chrome running within a new windowing system on top of a Linux kernel.</strong> For application developers, <strong>the web is the platform</strong>. All web-based applications will automatically work and new applications can be written using your favorite web technologies. And of course, these apps will run not only on Google Chrome OS, but on any standards-based browser on Windows, Mac and Linux thereby giving developers the largest user base of any platform.</p>
<p><strong>Google Chrome OS is a new project, separate from Android</strong>. Android was designed from the beginning to work across a variety of devices from phones to set-top boxes to netbooks. Google Chrome OS is being created for people who spend most of their time on the web, and is being designed to power computers ranging from small netbooks to full-size desktop systems. While there are areas where Google Chrome OS and Android overlap, we believe choice will drive innovation for the benefit of everyone, including Google.”</p></blockquote>
<p><strong>Wow, pretty big announcement with lots of potential market implications</strong>.  One way to look at this is they just described a system with “embedded OS” properties running as a mainstream desktop OS with services delivered via the web instead of relying on locally hosted applications.  I suppose in some ways this should come as no real surprise as it is entirely in-line with their cloud based strategy.</p>
<p>Whilst the target market would appear to be consumers, <strong>I can see enterprises jumping at a thin OS “that just works”</strong>.  Ultimately, this is moving us closer to  an age of disposable computing - low cost devices with low entry software footprints.</p>
<p>Organisations are keen to embrace smaller footprint client computers to cut costs and if the underlying hardware offers enterprise demanded features like full HD encryption (to protect that cached Cloud content), I could see enterprises taking a serious interest.</p>
<p><strong>Do we *really* want to run the dozen endpoint agents we have today for configuration management, NAC, AV, HIPS (pah!) and bear all the costs they bring?</strong> With a static client, you won’t need many of these features.  From a security point of view, this could be a very good thing - no AV headaches, significantly less attack surface (enterprise apps often demonstrate “brittle” security) and less PII to lose.</p>
<p>To deliver on a low-update OS, they will need to ship a subset of the Linux kernel that is considered “mature”, otherwise their users will be back on the  “patch treadmill” - which is something they explicitly state they are trying to avoid.</p>
<p>I find it interesting they are designing a new windowing system when there are so many options available today (some with decent security too).  I suspect this is to take advantage of advances in graphical chipsets.  Perhaps they see this as a chance to boost Chrome browser page rendering speed even further.</p>
<p>Perhaps the more fundamental question is whether we want Google owning the last bastion - our desktops.</p>
<p><strong>This brings us to the Chrome browser itself and associated technologies.</strong></p>
<h2>Google Native Client<strong><br/>
</strong></h2>
<p>Back in February, Google kicked off a security contest for a “research project” called Google Native Client (NaCl).  First a quick recap on Native Client:</p>
<p>“Native Client is an open-source research technology for running x86 native code in web applications, with the goal of maintaining the browser neutrality, OS portability, and safety that people expect from web apps. We’ve released this project at an early, research stage to get feedback from the security and broader open-source communities. We believe that Native Client technology will someday help web developers to create richer and more dynamic browser-based applications. ”</p>
<p>This is Google’s ambitious attempt to provide a high-speed, browser hosted application alternative to Java or Flash.  To do this securely, they designed a new security architecture and NaCl is the implementation.</p>
<p><a href='http://googlecode.blogspot.com/2009/02/announcing-native-client-security.html'>Announcing the security contest</a>, Henry Bridge from Google wrote:</p>
<blockquote><p>“Exploits, bugs, vulnerabilities, security holes — for most programmers these terms are synonymous with fire drills and coding all-nighters. However, for the next 10 weeks, the Native Client team is inviting you to bring them on! <strong>We’re challenging you to find security exploits in Native Client</strong>.”</p></blockquote>
<p>The judges, led by respected academic Ed Felton (Princeton), assessed the vulnerablities reported by each of the 600 participants based on “a) Quality (Severity, Scope, Reliability and Style) and b) Quantity”.  Participants were limited to reporting on 10 bugs (Google claimed this was to avoid wasting the judges time).</p>
<p><strong>Mark Dowd and Ben Hawkes won the contest, finding the bulk of the best bugs.</strong> Mark Dowd is well known in the security community - most often described as a humble genius (or a robot sent back in time :).  I followed along at home and it was great fun reading the bug descriptions as the competition progressed.  As this was a new security design, there were some unique vulnerabilities discovered along with novel exploit avenues.  Despite all the implementation snafus, <a href='http://googlecode.blogspot.com/2009/07/native-client-security-contest-results.html'>Google is taking comfort</a> that no underlying architectural weaknesses were found.</p>
<blockquote><p>“This contest helped us discover implementation errors in Native Client and some areas of our codebase we need to spend more time reviewing. <strong>More importantly, that no major architectural flaws were found provides evidence that Native Client can be made safe enough for widespread use.</strong> Toward that end, we’re implementing additional security measures, such as an outer sandbox…”</p></blockquote>
<p><a href='http://groups.google.com/group/native-client-announce/browse_thread/thread/e69fe64e8decbe16'>In other posts</a>, Google has indicated the plan to bundle NaCl with the browser, rather than offer as a end-user download.  There is some way to go before this happens, and the security contest is just one step on the journey before NaCl goes live.   The NaCl team also submitted a detailed technical design paper to the IEEE 2009 Symposium on Security and Privacy.  If anyone knows anything on the outcome of the peer review, please leave a comment.</p>
<p>Overall, it has to be said that the NaCl team at Google is doing a solid job trying to flush out security issues before “Primetime”.</p>
<p>Having said that, not all observers agree the architecture is a step in the right direction.  Noted reverse engineer <a href='http://lists.immunitysec.com/pipermail/dailydave/2009-July/005790.html'>Halvar Flake responded to a post by Dave Aitel</a> on the Daily Dave mailing list remarking that:</p>
<blockquote><p>“<strong>The real beauty in NaCl is that it is certain to defeat DEP</strong> [Ed: Data Execution Prevention is an hardware and/or software enabled chipset technology design to throw an exception when an attempt is made to pass off data pages as code pages]. Not that DEP is much of an obstacle in browsers these days, but still. <strong>It’ll also almost certainly allow <a href='http://en.wikipedia.org/wiki/ASLR'>ASLR</a> bypass</strong>.</p>
<p>Everyone who has even been to one of my classes has been tortured with the analogy that “writing an exploit is like trying to build a chair out of a number of random parts from the <a href='http://www.guardian.co.uk/commentisfree/2008/sep/20/diy.ikea'>IKEA</a> warehouse: Nothing ever fits, but the more pieces you have, the better your odds of success are.</p>
<p>The power to first execute Javascript to perform [Ed: memory] allocations/dealloctions, coupled with the ability to load arbitrary code into the address space that is only verified under alignment assumptions violated as soon as you can perform a control hijack, does look like a jar of superglue to me. And when you have a sufficiently large jar of superglue, you can essentially build a chair out of wood shavings.”</p></blockquote>
<p><strong>The point that Halvar is making is that the exploit coder has certain advantages when it comes to exploiting browser based weaknesses.</strong> Couple this with the very feature that NaCl introduces - loading Internet hosted native code - and any single implementation weakness makes way for reliable exploitation potential bypassing CPU anti-exploitation features.  This kind of dialogue is very constructive and I look forward to seeing how the thinking around NaCl develops.</p>
<h2>Google Apps: Beta Out, Enterprise Features In</h2>
<p><strong>Back to the Google announcements, and <a href='http://googleblog.blogspot.com/2009/07/google-apps-is-out-of-beta-yes-really.html'>the day finally came Google dropped ‘Beta’ from Google Apps, Gmail, Google Calendar, Google Docs and Google Talk</a>.</strong> This is clearly to please enterprise folks who take the traditional interpretation of “beta == buggy”.  Its hard for a CIO to get buy-in with their own org to adopt a hosted service that has those 4 letters staring back at them (even if they agree with Google’s definition of “beta”.  “Premium beta” anyone? ;-).</p>
<p><strong>Google also added email delegation, retention, DR features to Google Apps</strong>, along with <a href='http://googleenterprise.blogspot.com/2009/07/paving-road-to-apps-adoption-in-large.html'>“special handling of business users’ data in our data center operations.”</a> If anyone has any details on that last point, do share.  Google is in catch-up mode and ticking the right boxes.</p>
<p>All in all, this was a big day for Google and their evolving Cloud strategy, enterprise security people should take note…</p>
<p><span style='font-size: 100%;'><span style='font-family: arial;'><br/>
</span></span></p>
